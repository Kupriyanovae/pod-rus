widget = {
	name = "pod_umbra_adventure_window"
	visible = "[And(And(Not(IsPauseMenuShown), IsDefaultGUIMode), GetPlayer.IsValid)]"
	layer = royal_court
	size = { 100% 100% }

	window = {
		size = { 100% 100% }
		using = Window_Background_No_Edge
		movable = no

		# Using a character variable for now (so it can be set via character interaction)
		visible = "[And(GetPlayer.MakeScope.Var('pod_umbra_adventure_view').IsSet, GetPlayer.MakeScope.Var('umbra_adventure').IsSet)]"
		#visible = "[And(GetVariableSystem.Exists('pod_umbra_adventure_view'), GetPlayer.MakeScope.Var('umbra_adventure').IsSet)]"

		window = {
			name = "umbra_adventure_debug_window"
			size = { 330 330 }
			parentanchor = top|right
			position = { -20 50 }
			using = Window_Background_Subwindow

			vbox = {
				margin = { 10 10 }
				spacing = 5

				text_single = {
					raw_text = "Debug Menu"
				}
				
				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					text_label_left = {
						raw_text = "Reroll Map"
					}
					expand = {}
					button_redo = {
						size = { 24 24 }
						onclick = "[PlayerGuiExecute('POD_reload_umbra_adventure')]"
					}
				}				

				hbox = {
					layoutpolicy_horizontal = expanding
					text_label_left = {
						raw_text = "Toggle Grid"
					}
					expand = {}
					button_checkbox = {
						size = { 24 24 }
						onclick = "[GetVariableSystem.Toggle('pod_umbra_adventure_show_grid')]"
						checked = "[GetVariableSystem.Exists('pod_umbra_adventure_show_grid')]"
					}
				}
				pod_debug_var_large_inc_editor = {
					blockoverride "label" {
						raw_text = "Width"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('width').GetValue|0]"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_width_edit')]" }
				}
				pod_debug_var_large_inc_editor = {
					blockoverride "label" {
						raw_text = "Height"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('height').GetValue|0]"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_height_edit')]" }
				}
				pod_debug_var_editor = {
					blockoverride "label" {
						raw_text = "Rows"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('rows').GetValue|0]"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_rows_edit')]" }
				}
				pod_debug_var_editor = {
					blockoverride "label" {
						raw_text = "Columns"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('columns').GetValue|0]"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_columns_edit')]" }
				}
				pod_debug_var_editor = {
					blockoverride "label" {
						raw_text = "Padding"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('padding').GetValue|0]"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_padding_edit')]" }
				}
				pod_debug_var_editor = {
					blockoverride "label" {
						raw_text = "Node Chance"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('node_chance').GetValue|0]%"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_node_chance_edit')]" }
				}
				pod_debug_var_editor = {
					blockoverride "label" {
						raw_text = "Neighbor Chance"
					}
					blockoverride "variable" {
						raw_text = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('neighbor_chance').GetValue|0]%"
					}
					blockoverride "datacontext_edit"   { datacontext = "[GetScriptedGui('POD_umbra_adventure_neighbor_chance_edit')]" }
				}
				expand = {}
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			header_no_background = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					raw_text = "Hello!"
				}

				blockoverride "button_close"
				{
					onclick = "[PlayerGuiExecute('POD_umbra_adventure_close_window')]"
					#onclick = "[GetVariableSystem.Clear('pod_umbra_adventure_view')]"
				}
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				expand = {}
				widget = {
					min_width = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('width').GetValue]"
					max_width = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('width').GetValue]"
					min_height = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('height').GetValue]"
					max_height = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('height').GetValue]"
					background = {
						using = Background_Area_Solid
						margin = { 13 13 }
					}
					# background = {
					# 	using = pod_heist_suspicion_bg
					# 	shaderfile = "gfx/FX/POD_shaders/POD_event_shaders.shader"
					# 	effectname = "FogHeist3"
					# 	margin = { 16 16 }
					# }
					widget = {
						name = "pod_umbra_lines"
						size = { 100% 100% }
						alwaystransparent = yes
						datamodel = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('node_map').GetList('lines')]"
						item = {
							pod_umbra_line = {}
						}
					}
					widget = {
						name = "pod_umbra_nodes"
						size = { 100% 100% }
						alwaystransparent = yes
						datamodel = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('node_map').GetList('nodes')]"
						item = {
							pod_umbra_node = {}
						}
					}
					widget = {
						name = "pod_umbra_grid_lines"
						visible = "[GetVariableSystem.Exists('pod_umbra_adventure_show_grid')]"
						size = { 100% 100% }
						alwaystransparent = yes
						datamodel = "[GetPlayer.MakeScope.Var('umbra_adventure').Var('node_map').GetList('grid_lines')]"
						item = {
							pod_umbra_grid_line = {}
						}
					}
				}
				spacer = { 
					size = { 20 0 }
				}
				vbox = {
					layoutpolicy_vertical = expanding
					
					expand = {}

					text_single = {
						raw_text = "Your Inventory"
					}
					spacer = {
						size = { 0 5 }
					}

					container = {
						background = {
							using = Background_Frame_Gold
						}

						margin_widget = {
							size = { 210 410 }
							margin = { 5 5 }

							fixedgridbox = {
								datamodel = "[GetPlayer.MakeScope.Var('umbra_adventure').GetList('dummy_inventory')]"
								datamodel_wrap = 2
								addcolumn = 100
								addrow = 100

								flipdirection = yes

								item = {
									pod_inventory_placeholder = {}
								}
							}
							fixedgridbox = {
								datamodel = "[GetPlayer.MakeScope.Var('umbra_adventure').GetList('inventory')]"
								datamodel_wrap = 2
								addcolumn = 100
								addrow = 100
								
								flipdirection = yes

								item = {
									pod_inventory_item = {}
								}
							}
						}
					}
					
					expand = {}
				}
				expand = {}
			}

			expand = {}
		}
	}
}

types UmbraAdventureTypes
{
	type pod_inventory_item = margin_widget
	{
		size = { 100 100 }
		margin = { 5 5 }
		background = {
			using = Background_Frame
		}

		margin_widget = {
			visible = "[Scope.Var('type').IsSet]"
			size = { 100% 100% }
			margin = { 10 10 }
			
			# essence
			widget = {
				size = { 100% 100% }
				visible = "[StoryGuiIsShown('POD_umbra_adventure_is_essence')]"
				icon = {
					parentanchor = center
					texture = "gfx/interface/icons/icon_gold.dds"
				}

				text_single = {
					visible = "[Scope.Var('quantity').IsSet]"
					parentanchor = bottom|right
					raw_text = "[Scope.Var('quantity').GetValue]"
				}
			}

			# artifact
			widget = {
				visible = "[StoryGuiIsShown('POD_umbra_adventure_is_artifact')]"
				size = { 100% 100% }

				datacontext = "[Scope.Var('artifact').Artifact]"

				icon_artifact = {
					parentanchor = center
					size = { 100 100 }
				}
			}
		}
		

		button_close = {
			parentanchor = top|right
			scale = 0.5
			raw_tooltip = "Drop this item forever"
			onclick = "[StoryGuiExecute('POD_umbra_adventure_drop_item')]"
		}
	}
	type pod_inventory_placeholder = widget
	{
		size = { 100 100 }
		background = {
			visible = "[StoryGuiIsShown('POD_umbra_adventure_inventory_placeholder')]"
			using = Background_Frame
		}
	}
	type pod_umbra_node = button_normal
	{
		size = { 50 50 }
		# Scale down positions by the scaling vector
		# Widgets scale up automatically so we need to apply the scaling vector here to ensure that the position of the icon is appropriately adjusted
		position = "[Subtract_CVector2f( Multiply_CVector2f(GetScalingVector, PdxGetWidgetScreenSize(PdxGuiWidget.FindChild('positioning_helper').Self)), '(CVector2f)25,25' )]"

		using = POD_scaling_helper

		# Please give us a better way to create CVector2f Paradox
		widget = {
			name = "positioning_helper"
			min_width = "[ScopedNodeX]"
			max_width = "[ScopedNodeX]"
			min_height = "[ScopedNodeY]"
			max_height = "[ScopedNodeY]"
		}

		highlight_icon = {
			texture = "gfx/interface/buttons/button_activity_base.dds"
			size = { 50 50 }
		}

		highlight_icon = {
			texture = "gfx/interface/icons/message_feed/control.dds"
			parentanchor = center
			size = { 40 40 }
		}
	}
	type pod_umbra_line = widget
	{
		size = { 100% 100% }
		line = {
			using = Line_Lifestyles_Unlocked
			width = 8
			color = { 0 0 0 1 }
			scale = "[GetInvParentScale(PdxGuiWidget.Self)]"
			from  = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_start').Self)]"
			to    = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_end').Self)]"
		}
		line = {
			using = Line_Lifestyles_Unlocked
			width = 5
			scale = "[GetInvParentScale(PdxGuiWidget.Self)]"
			from  = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_start').Self)]"
			to    = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_end').Self)]"
		}
		widget = {
			name = "pod_line_start"
			min_width = "[ScopedLineX1]"
			max_width = "[ScopedLineX1]"
			min_height = "[ScopedLineY1]"
			max_height = "[ScopedLineY1]"
		}
		widget = {
			name = "pod_line_end"
			min_width = "[ScopedLineX2]"
			max_width = "[ScopedLineX2]"
			min_height = "[ScopedLineY2]"
			max_height = "[ScopedLineY2]"
		}
	}
	type pod_umbra_grid_line = widget
	{
		size = { 100% 100% }
		line = {
			using = MiddleLine
			width = 2
			scale = "[GetInvParentScale(PdxGuiWidget.Self)]"
			from  = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_start').Self)]"
			to    = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_end').Self)]"
		}
		widget = {
			name = "pod_line_start"
			min_width = "[FixedPointToInt(Scope.Var('start_x').GetValue)]"
			max_width = "[FixedPointToInt(Scope.Var('start_x').GetValue)]"
			min_height = "[FixedPointToInt(Scope.Var('start_y').GetValue)]"
			max_height = "[FixedPointToInt(Scope.Var('start_y').GetValue)]"
		}
		widget = {
			name = "pod_line_end"
			min_width = "[FixedPointToInt(Scope.Var('end_x').GetValue)]"
			max_width = "[FixedPointToInt(Scope.Var('end_x').GetValue)]"
			min_height = "[FixedPointToInt(Scope.Var('end_y').GetValue)]"
			max_height = "[FixedPointToInt(Scope.Var('end_y').GetValue)]"
		}
	}
	#############
	# Debugging #
	#############
	type pod_debug_var_large_inc_editor = hbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 6
		text_label_left = {
			block "label" {
				raw_text = "" 
			}
		}
		expand = {}
		hbox = {
			block "datacontext_edit" {}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow_left_double.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)-100')).End)]"
			}
			button_icon = {
				size = { 24 24 }
				mirror = horizontal
				texture = "gfx/interface/icons/flat_icons/select_arrow.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)-10')).End)]"
			}
			text_label_center = {
				min_width = 48
				block "variable" {
					raw_text = ""
				}
			}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)10')).End)]"
			}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow_double.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)100')).End)]"
			}
		}
	}
	type pod_debug_var_editor = hbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 6
		text_label_left = {
			block "label" {
				raw_text = "" 
			}
		}
		expand = {}
		hbox = {
			block "datacontext_edit" {}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow_left_double.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)-10')).End)]"
			}
			button_icon = {
				size = { 24 24 }
				mirror = horizontal
				texture = "gfx/interface/icons/flat_icons/select_arrow.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)-1')).End)]"
			}
			text_label_center = {
				min_width = 48
				block "variable" {
					raw_text = ""
				}
			}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)1')).End)]"
			}
			button_icon = {
				size = { 24 24 }
				texture = "gfx/interface/icons/flat_icons/select_arrow_double.dds"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('delta',MakeScopeValue('(CFixedPoint)10')).End)]"
			}
		}
	}
}
